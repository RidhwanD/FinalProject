type G.					(* Finite group G *)
type exponent.			(* The exponent (Integer) *)

(* Cij denotes channel from Si to Sj *)
(* Upflow Channel *)
free c01, c12, c23, c34, c45, c56, c67 : channel.

(* Downflow Channel *)
free c10, c21, c32, c43, c54, c65, c76 : channel.

(* c: open channel for encrypted message m *)
(* sc: open channel for encrypted message Key *)
free c, sc : channel.
free m, Key : bitstring [private].

(* Pi4 denotes channel Si to S4 *)
free p08, p18, p28, p38, p48, p58, p68, p78 : channel [private].

query attacker(m); 
attacker(sameKey).

fun enc(bitstring, G): bitstring.			(* The encryption function *)
fun dec(bitstring, G): bitstring.			(* The decryption function *)
equation forall x: bitstring, y: G; dec(enc(x,y),y) = x. (* ExDx = DxEx = 1 *)

const g : G[data].							(* Base of exponentiation G *)
fun exp(G, exponent): G.					(* The exponentiation function *)

(* Reserved for equation *)
(* Equations regarding the exponentiation function *)

equation forall 
	x1: exponent, x2: exponent, x3: exponent, x4: exponent, 
	x5: exponent, x6: exponent, x7: exponent, x8: exponent; 
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x6),x7),x8)=
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x6),x8),x7).

equation forall 
	x1: exponent, x2: exponent, x3: exponent, x4: exponent, 
	x5: exponent, x6: exponent, x7: exponent, x8: exponent; 
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x6),x7),x8)=
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x8),x7),x6).

equation forall 
	x1: exponent, x2: exponent, x3: exponent, x4: exponent, 
	x5: exponent, x6: exponent, x7: exponent, x8: exponent; 
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x6),x7),x8)=
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x8),x7),x6),x5).

equation forall 
	x1: exponent, x2: exponent, x3: exponent, x4: exponent, 
	x5: exponent, x6: exponent, x7: exponent, x8: exponent; 
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x6),x7),x8)=
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x8),x7),x6),x5),x4).

equation forall 
	x1: exponent, x2: exponent, x3: exponent, x4: exponent, 
	x5: exponent, x6: exponent, x7: exponent, x8: exponent; 
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x6),x7),x8)=
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x8),x7),x6),x5),x4),x3).

equation forall 
	x1: exponent, x2: exponent, x3: exponent, x4: exponent, 
	x5: exponent, x6: exponent, x7: exponent, x8: exponent; 
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x6),x7),x8)=
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x8),x7),x6),x5),x4),x3),x2).

equation forall 
	x1: exponent, x2: exponent, x3: exponent, x4: exponent, 
	x5: exponent, x6: exponent, x7: exponent, x8: exponent; 
	exp(exp(exp(exp(exp(exp(exp(exp(g,x1),x2),x3),x4),x5),x6),x7),x8)=
	exp(exp(exp(exp(exp(exp(exp(exp(g,x8),x7),x6),x5),x4),x3),x2),x1).

   (* End of equation *)

set attacker = passive.

let s0 = 
	new n0 : exponent;						(* The secret exponent of S0 is n0 *)
	out(c01, exp(g,n0));					(* S0 sends g^n0 to S1 *)

	in(c10, d1: G);							(* S1 receives g^n7n6n5n4n3n2n1 from S1 *)
	let comk0 = exp(d1,n0) in 				(* S0 computes the key comk0 = g^n7n6n5n4n3n2n1n0 *)
		out(c, enc(m, comk0));				(* S0 sends Ecomk0(m) using open channel c *)
		out(p08, comk0).					(* S0 sends comk0 to S8 using private channel *)

let s1 = 
	new n1 : exponent;						(* The secret exponent of S1 is n1 *)
	in(c01, u1: G);							(* S1 receives g^n0 from S0 *)
	out(c12, (u1, exp(u1, n1)));			(* S1 sends list (g^n0, g^n0n1) to S2 *)

	in(c21, (d1: G, d2: G));				
	(* S1 receives list (g^n7n6n5n4n3n2, g^n0n7n6n5n4n3n2) from S2 *)
	
	out(c10, exp(d1,n1));					(* S1 sends g^n7n6n5n4n3n2n1 to S0 *)
	let comk1 = exp(d2,n1) in				(* S1 computes the key comk1 = g^n0n7n6n5n4n3n2n1 *)
		out(p18, comk1).					(* S1 sends comk1 to S8 using private channel *)

let s2 = 
	new n2 : exponent;						(* The secret exponent of S2 is n2 *)
	in(c12, (u1: G, u2: G));				(* S2 receives list (g^n0, g^n0n1) from S1 *)
	out(c23, (u1, u2, exp(u2,n2)));			(* S2 sends list (g^n0, g^n0n1, g^n0n1n2) to S3 *)

	in(c32, (d1: G, d2: G, d3: G));
	(* S2 receives list (g^n7n6n5n4n3, g^n0n7n6n5n4n3, g^n0n1n7n6n5n4n3) from S3 *)

	out(c21, (exp(d1,n2), exp(d2,n2)));		
	(* S2 sends list (g^n7n6n5n4n3n2, g^n0n7n6n5n4n3n2) to S1 *)

	let comk2 = exp(d3,n2) in 				(* S2 computes the key comk2 = g^n0n1n7n6n5n4n3 *)
		out(p28, comk2).					(* S2 sends comk2 to S8 using private channel *)

let s3 = 
	new n3 : exponent;						(* The secret exponent of S3 is n3 *)
	in(c23, (u1: G, u2: G, u3: G));			(* S3 receives list (g^n0, g^n0n1, g^n0n1n2) from S2 *)
	out(c34, (u1, u2, u3, exp(u3,n3)));		(* S3 sends list (g^n0, g^n0n1, g^n0n1n2, g^n0n1n2n3) to S4 *)

	in(c43, (d1: G, d2: G, d3: G, d4: G));
	(* S3 receives list (g^n7n6n5n4, g^n0n7n6n5n4, g^n0n1n7n6n5n4, g^n0n1n2n7n6n5n4) from S4 *)

	out(c32, (exp(d1,n3), exp(d2,n3), exp(d3,n3)));
	(* S3 sends list (g^n7n6n5n4n3, g^n0n7n6n5n4n3, g^n0n1n7n6n5n4n3) to S2 *)

	let comk3 = exp(d4,n3) in 				(* S3 computes the key comk3 = g^n0n1n2n7n6n5n4n3 *)
		out(p38, comk3).					(* S3 sends comk3 to S8 using private channel *)

let s4 = 
	new n4 : exponent;						(* The secret exponent of S4 is n4 *)
	in(c34, (u1: G, u2: G, u3: G, u4: G));	(* S4 receives list (g^n0, g^n0n1, g^n0n1n2, g^n0n1n2n3) from S3 *)
	out(c45, (u1, u2, u3, u4, exp(u4,n4)));	(* S4 sends list (g^n0, g^n0n1, g^n0n1n2, g^n0n1n2n3, g^n0n1n2n3n4) to S5 *)

	in(c54, (d1: G, d2: G, d3: G, d4: G, d5: G));
	(* S4 receives list (g^n7n6n5, g^n0n7n6n5, g^n0n1n7n6n5, g^n0n1n2n7n6n5, g^n0n1n2n3n7n6n5) from S5 *)

	out(c43, (exp(d1,n4), exp(d2,n4), exp(d3,n4), exp(d4,n4)));
	(* S4 sends list (g^n7n6n5n4, g^n0n7n6n5n4, g^n0n1n7n6n5n4, g^n0n1n2n7n6n5n4) to S3 *)

	let comk4 = exp(d5,n4) in 				(* S4 computes the key comk4 = g^n0n1n2n3n7n6n5n4 *)
		out(p48, comk4).					(* S4 sends comk4 to S8 using private channel *)

let s5 = 
	new n5 : exponent;						(* The secret exponent of S5 is n5 *)
	in(c45, (u1: G, u2: G, u3: G, u4: G, u5: G));	
	(* S5 receives list (g^n0, g^n0n1, g^n0n1n2, g^n0n1n2n3, g^n0n1n2n3n4) from S4 *)
	
	out(c56, (u1, u2, u3, u4, u5, exp(u5,n5)));		
	(* S5 sends list (g^n0, g^n0n1, g^n0n1n2, g^n0n1n2n3, g^n0n1n2n3n4, g^n0n1n2n3n4n5) to S6 *)

	in(c65, (d1: G, d2: G, d3: G, d4: G, d5: G, d6: G));
	(* S5 receives list (g^n7n6, g^n0n7n6, g^n0n1n7n6, g^n0n1n2n7n6, g^n0n1n2n3n7n6, g^n0n1n2n3n4n7n6) from S6 *)

	out(c54, (exp(d1,n5), exp(d2,n5), exp(d3,n5), exp(d4,n5), exp(d5,n5)));
	(* S5 sends list (g^n7n6n5, g^n0n7n6n5, g^n0n1n7n6n5, g^n0n1n2n7n6n5, g^n0n1n2n3n7n6n5) to S4 *)

	let comk5 = exp(d6,n5) in 				(* S5 computes the key comk5 = g^n0n1n2n3n4n7n6n5 *)
		out(p58, comk5).					(* S5 sends comk5 to S8 using private channel *)

let s6 = 
	new n6 : exponent;						(* The secret exponent of S6 is n6 *)
	in(c56, (u1: G, u2: G, u3: G, u4: G, u5: G, u6: G));	
	(* S6 receives list (g^n0, g^n0n1, g^n0n1n2, g^n0n1n2n3, g^n0n1n2n3n4, g^n0n1n2n3n4n5) from S5 *)
	
	out(c67, (u1, u2, u3, u4, u5, u6, exp(u6,n6)));		
	(* S6 sends list (g^n0, g^n0n1, g^n0n1n2, g^n0n1n2n3, g^n0n1n2n3n4, g^n0n1n2n3n4n5, g^n0n1n2n3n4n5n6) to S7 *)

	in(c76, (d1: G, d2: G, d3: G, d4: G, d5: G, d6: G, d7: G));
	(* S6 receives list (g^n7, g^n0n7, g^n0n1n7, g^n0n1n2n7, g^n0n1n2n3n7, g^n0n1n2n3n4n7, g^n0n1n2n3n4n5n7) from S7 *)

	out(c65, (exp(d1,n6), exp(d2,n6), exp(d3,n6), exp(d4,n6), exp(d5,n6), exp(d6,n6)));
	(* S6 sends list (g^n7n6, g^n0n7n6, g^n0n1n7n6, g^n0n1n2n7n6, g^n0n1n2n3n7n6, g^n0n1n2n3n4n7n6) to S5 *)

	let comk6 = exp(d7,n6) in 				(* S6 computes the key comk6 = g^n0n1n2n3n4n5n7n6 *)
		out(p68, comk6).					(* S6 sends comk6 to S8 using private channel *)

let s7 = 
	new n7 : exponent;						(* The secret exponent of S7 is n7 *)
	in(c67, (d1: G, d2: G, d3: G, d4: G, d5: G, d6: G, d7: G));	
	(* S7 receives list (g^n0, g^n0n1, g^n0n1n2, g^n0n1n2n3, g^n0n1n2n3n4, g^n0n1n2n3n4n5, g^n0n1n2n3n4n5n6) from S6 *)

	out(c76, (exp(g,n7), exp(d1,n7), exp(d2,n7), exp(d3,n7), exp(d4,n7), exp(d5,n7), exp(d6,n7)));
	(* S7 sends list (g^n7, g^n0n7, g^n0n1n7, g^n0n1n2n7, g^n0n1n2n3n7, g^n0n1n2n3n4n7, g^n0n1n2n3n4n5n7) to S6 *)

	let comk7 = exp(d7,n7) in 				(* S7 computes the key comk7 = g^n0n1n2n3n4n5n6n7 *)
		out(p78, comk7).					(* S7 sends comk7 to S8 using private channel *)

let s8 =
	in(p08, k0: G);							(* S8 receives g^n7n6n5n4n3n2n1n0 from S0 *)
	in(p18, k1: G);							(* S8 receives g^n0n7n6n5n4n3n2n1 from S1 *)
	in(p28, k2: G);							(* S8 receives g^n0n1n7n6n5n4n3n2 from S2 *)
	in(p38, k3: G);							(* S8 receives g^n0n1n2n7n6n5n4n3 from S3 *)
	in(p48, k4: G);							(* S8 receives g^n0n1n2n3n7n6n5n4 from S4 *)
	in(p58, k5: G);							(* S8 receives g^n0n1n2n3n4n7n6n5 from S5 *)
	in(p68, k6: G);							(* S8 receives g^n0n1n2n3n4n5n7n6 from S6 *)
	in(p78, k7: G);							(* S8 receives g^n0n1n2n3n4n5n6n7 from S7 *)
	
	if k0 = k1 then							(* S8 compares the values *)
		if k1 = k2 then
			if k2 = k3 then
				if k3 = k4 then
					if k4 = k5 then
						if k5 = k6 then
							if k6 = k7 then	(* If all values are equals, then the process stops *)
								0
							else
								out(sc, Key)(* Otherwise, S4 sends Key using open channel sc *)
						else
							out(sc, Key)	
					else
						out(sc, Key)	
				else
					out(sc, Key)	
			else
				out(sc, Key)	
		else
			out(sc, Key)			
	else
		out(sc, Key).

process
	(s0 | s1 | s2 | s3 | s4 | s5 | s6 | s7 | s8)	(* All subprocesses are executed in parallel *)

