free c01, c10, c, sc: channel.
free c02, c12: channel [private].
free msg, sameKey: bitstring [private].
	
query attacker(msg); 
attacker(sameKey).

fun enc(bitstring, bitstring): bitstring.
fun dec(bitstring, bitstring): bitstring.
equation forall x: bitstring, y: bitstring; dec(enc(x,y),y) = x.

const g: bitstring [data].
fun exp(bitstring, bitstring): bitstring.

equation forall x: bitstring, y: bitstring; exp(exp(g,x),y) = exp(exp(g,y),x).
reduc
	forall y: bitstring, z: bitstring; inv(exp(exp(g,y),z),z) = exp(g,y);
	forall y: bitstring, z: bitstring; inv(exp(exp(g,y),z),y) = exp(g,z);
	forall y: bitstring; inv(exp(g,y),y) = g.

set attacker = passive.

let par1 =
	new a1: bitstring;
	out(c01, exp(g,a1));		(* g^a1 *)
	in(c10, v2: bitstring);
	let key1 = exp(v2,a1) in 
		out(c, enc(msg,key1));
		out(c02, key1).

let par2 =
	new a2: bitstring;
	out(c10, exp(g,a2));		(* g^a2 *)
	in(c01, v1: bitstring);
	let key2 = exp(v1,a2) in
		out(c12, key2).

let px3 =
	in(c02, k1: bitstring);
	in(c12, k2: bitstring);
	if k1 = k2 then
		0
	else
		out(sc, sameKey).

process
	par1 | par2 | px3